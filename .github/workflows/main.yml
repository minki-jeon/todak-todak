name: 앱 빌드 후 ec2에 복사

on:
  push:
    tags:
      - 'version*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      # FRONTEND BUILD
      - name: install and build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: copy frontend dist to backend static folder
        run: |
          mkdir -p backend/src/main/resources/static
          cp -r frontend/dist/* backend/src/main/resources/static/

      # create secret files
      - name: create secret folder and files
        run: |
          mkdir -p backend/src/main/resources/secret
          echo "${{secrets.CUSTOM_PROPERTIES}}" > backend/src/main/resources/secret/custom.properties
          echo "${{secrets.PRIVATE_PEM}}" > backend/src/main/resources/secret/private.pem
          echo "${{secrets.PUBLIC_PEM}}" > backend/src/main/resources/secret/public.pem
          
          mkdir -p backend/src/main/resources/secret/ssl
          echo "${{secrets.SSL_DOMAIN_CERT_PEM}}" > backend/src/main/resources/secret/ssl/domain.cert.pem
          echo "${{secrets.SSL_PRIVATE_KEY_PEM}}" > backend/src/main/resources/secret/ssl/private.key.pem
          echo "${{secrets.SSL_PUBLIC_KEY_PEM}}" > backend/src/main/resources/secret/ssl/public.key.pem

      # BACKEND BUILD
      - name: build spring boot app
        working-directory: ./backend
        run: |
          chmod +x gradlew
          ./gradlew test
          ./gradlew bootJar

      # deploy to ec2
      - name: save ssh key file
        run: |
          echo "${{secrets.KEY250717_PEM}}" > key.pem
          chmod 600 key.pem

      - name: upload jar to ec2
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} "mkdir -p /home/${{secrets.EC2_USER}}/app"
          scp -i key.pem -o StrictHostKeyChecking=no backend/build/libs/*.jar ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}}:/home/${{secrets.EC2_USER}}/app/prj4.jar

      - name: connect ec2 and run jar with docker
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} << 'EOF'
          docker stop prj4 || true
          docker rm prj4 || true
          
          docker run -d -p 443:443 -p 80:80 --restart always --name prj4 -v /home/${{secrets.EC2_USER}}/app:/app openjdk:21 java -jar /app/prj4.jar
          
          docker image prune -f
          EOF
